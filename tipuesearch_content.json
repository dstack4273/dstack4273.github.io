{"pages":[{"url":"http://allonsyblog.com/about/","text":"Placeholder for later :)","tags":"misc","title":"About"},{"url":"http://allonsyblog.com/2016/09/use-python-to-save-a-web-page/","text":"I wrote most of this a couple of months ago, but I forgot to post it…because well, I'm not great at this blogging thing yet. I'll try to get better about that. I finally finished up a post to a car forum that I follow to provide a little DIY about something that I added to my car for the other users to reference. I also figured it might help encourage anyone that might have been on the fence whether they were going to buy the product or not. One of the regular contributors to that forum asked if I could provide a PDF of the thread, or if they could. I took a quick look around and checked out what the output of print saved to PDF by way of the OS X built-in utility would look like, and thought that there might be a web based offering that might provide slightly nicer results. I found one that worked fairly well, but it watermarked all of the pages unless you bought a premium (monthly fee) user license. Another almost identical utility (probably the same underlying code even) had an almost identical set up. Next I turned to Google to see if there was perhaps an open source Python package that could do something like what I was looking for: Enter pdfkit github , pypi . This post on stackoverflow , showed that I could accomplish this task with a crisp two lines of code: sign. me. up! I went ahead and pip installed my newfound open source savior, only to find out that it had a dependency: wkhtmltopdf. Okay no sweat I'll just grab that , install it real quick, and be on my way. /Sidebar/ After learning the hard learned lesson about dependencies getting tangled up, and the difficulty of updating and managing software installs on OS X, I switched over to homebrew, which I try to always use now if at all possible. If you haven't used it, I highly encourage you to check it out. Homebrew is invoked via the command line using brew {some operator command} <software that you want you want to do something with> /End Sidebar/ I tried using brew info wkhtmltopdf but instead of the short details I expected to see back instead homebrew returned Error: No available formula with the name \"wkhtmltopdf\" . Grrr, so I go to the wkhtmltopdf homepage (http://wkhtmltopdf.org/) and saw that they have a nice set of installers to get everything up and running. But, first I wanted to see if I could figure out why wkhtmltopdf wasn't available in brew so I searched around a bit and eventually came across a note in the pdfkit Github repository wiki (https://github.com/JazzCore/python-pdfkit/wiki/Installing-wkhtmltopdf) that said I could use brew install Caskroom/cask/wkhtmltopdf . I ran that in my terminal and everything installed great! Now I moved back to my editor and put together my short script: import os from pdfkit import from_url as converter my_desktop = os . path . expanduser ( '~/Desktop' ) converter ( 'http://forums.vwvortex.com/showthread.php?7825737-INA-HPFP-Cam-Follower-to-TSI-Roller-Install-DIY-lite' , my_desktop + '/post.pdf' ) From that little script (which could probably be shortened with some clever one-liner syntax, and a URL shortener), I now had a PDF on my desktop named \"post\". The script throws out an error Exit with code 1 due to network error: ContentNotFoundError , but everything still works like I needed it to. As an added benefit, this should work in both Python 2 and Python 3 - yay!","tags":"Using Python","title":"Use Python to Save a Web Page"},{"url":"http://allonsyblog.com/2016/07/configure-virtualenv-to-run-python-2-and-3-side-by-side/","text":"Recently one of the tutorials that I have wanted to work on was actually explicitly for Python3. Since virtually everything else that I have worked on to this point is for Python2, I hadn't really given any thought to the problem of how to continue to use VirtualEnv with a different version of Python. The topic is covered some in bits and pieces here and there, but no one really comes out and explains how to get it working. I do all of my work on OS X, so my configuration settings are from my .bash_profile dotfile. I have an existing Python 3 and Python 2 install through Homebrew. I had initially set up my VituralEnv Wrapper from the instructions listed in this tutorial . After that is working for you, all you should have to do is set up something like what I have in my .bash_profile: python3 = which python3 alias mkvirtualenv3 = mkvirtualenv -p $ python3 What this does is sets an environment variable that reads the location of your python3 install, and uses it along with the mkvirtualenv command's -p flag to define the version of python that you want to create your virtual environment with. You could just hard code in the path of your python3 install, but I thought that maybe using the actual python3 shell path might make it a little more robust to any changes I might make absentmindedly. Use Using this is super easy because of how I went about building it to work. Essentially those two lines allow me to have an alias that looks similar to the format of the python vs python3 commands. For a Python 2 project you can type mkvirtualenv <project name> and for a Python 3 project mkvirtualenv3 <project name> where <project name> is the name of your project…(without the pointy brackets) and you'll have a new shiny virtual environment to start working in. Here are all of the things that I currently have in my .bash_profile if you are curious in what other witchcraft I've got gathered together: alias lls=\"ls \\-al\" alias mkvirtualenv3=\"mkvirtualenv -p $ py3 \" export PS1=\"\\[\\033[36m\\]\\u:\\[\\033[m\\]\\w\\[\\033[m\\] $ \" export CLICOLOR=1 export LSCOLORS=ExFxBxDxCxegedabagacad # nvm export NVM_DIR=~/.nvm . $( brew --prefix nvm ) /nvm.sh # move usr/local to front of path export PATH=usr/local/bin: $ PATH WORKON_HOME=~/Envs source /usr/local/bin/virtualenvwrapper.sh # ruby env mgr if which rbenv > /dev/null; then eval \" $( rbenv init - ) \"; fi py3= $( which python3 ) # adroid sdk export PATH=~/Library/Android/sdk/tools: $ PATH export PATH=~/Library/Android/sdk/platform-tools: $ PATH If you have any tips on how you work with both versions of Python in your environment please comment below. If you have any questions post them up and I'll do my best to answer them.","tags":"Dev Environment","title":"Configure VirtualEnv to Run Python 2 and 3 Side by Side"},{"url":"http://allonsyblog.com/2016/02/testpost/","text":"I'm adding another post just to see if the problem that I am having with the first test post is causing the thumbnail and site title to point to whatever page I'm currently on. If this doesn't work then I'm going to have to dig into what I could've done to break my theme's templates.","tags":"New Stuff","title":"TestPost"},{"url":"http://allonsyblog.com/2016/01/testPost/","text":"This is the first post on my blog, so I can check out how everything looks. I plan on eventually getting to where I regularly publish my notes here for things that I learn, figure out, or am stumped with as I work on learning how to code. For the time being though, this is still a work in progress as I figure out how pelican works, and get a workflow set up. Testing definition lists Will it work?","tags":"New Stuff","title":"First Post"}]}